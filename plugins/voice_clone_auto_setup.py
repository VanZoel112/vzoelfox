#!/usr/bin/env python3
"""
üîß VOICE CLONE AUTO SETUP PLUGIN - Automatic Configuration System
Fitur: Otomatis mengisi config API keys dan setup voice cloning
Author: Vzoel Fox's (Enhanced by Morgan)  
Version: 1.0.0 - Auto Setup Edition
"""

import asyncio
import json
import os
import random
import sys
import requests
from datetime import datetime
from telethon import events
import sqlite3

# Premium emoji helper
sys.path.append('utils')
try:
    from premium_emoji_helper import get_emoji, safe_send_premium, safe_edit_premium, get_vzoel_signature
except ImportError:
    def get_emoji(emoji_type): return 'ü§©'
    async def safe_send_premium(event, text, **kwargs): await event.reply(text, **kwargs)
    async def safe_edit_premium(message, text, **kwargs): await message.edit(text, **kwargs)
    def get_vzoel_signature(): return 'ü§© VzoelFox Premium System'

# ===== PLUGIN INFO =====
PLUGIN_INFO = {
    "name": "voice_clone_auto_setup", 
    "version": "1.0.0",
    "description": "üîß Auto setup & config untuk voice cloning system",
    "author": "Vzoel Fox's (Enhanced by Morgan)",
    "commands": [
        ".vsetup auto", ".vsetup config", ".vsetup keys", ".vsetup test",
        ".vsetup voices", ".vsetup validate", ".vsetup demo"
    ],
    "features": [
        "Auto API key detection", "Config validation", "Voice model setup",
        "Automatic testing", "Error diagnosis", "Performance monitoring"
    ]
}

# ===== CONFIGURATION =====
CONFIG_FILE = "voice_clone_config.json"
BACKUP_DIR = "voice_clone_backups"

# API Key Providers & Free Alternatives
API_PROVIDERS = {
    "elevenlabs": {
        "name": "ElevenLabs",
        "url": "https://elevenlabs.io/",
        "free_tier": True,
        "free_chars": 10000,
        "test_endpoint": "https://api.elevenlabs.io/v1/voices",
        "demo_voices": {
            "21m00Tcm4TlvDq8ikWAM": "Rachel - Female",
            "29vD33N1CtxCmqQRPOHJ": "Drew - Male",
            "pNInz6obpgDQGcFmaJgB": "Adam - Male"
        }
    },
    "openai": {
        "name": "OpenAI",
        "url": "https://platform.openai.com/",
        "free_tier": False,
        "test_endpoint": "https://api.openai.com/v1/models",
        "demo_voices": {
            "alloy": "Alloy - Balanced",
            "echo": "Echo - Male", 
            "fable": "Fable - British",
            "onyx": "Onyx - Deep",
            "nova": "Nova - Female",
            "shimmer": "Shimmer - Soft"
        }
    },
    "murf": {
        "name": "Murf.ai",
        "url": "https://murf.ai/",
        "free_tier": True,
        "free_minutes": 10,
        "test_endpoint": "https://api.murf.ai/v1/voices"
    }
}

# Use standardized premium emoji system

# ===== AUTO SETUP FUNCTIONS =====
def create_default_config():
    """Create default voice clone configuration"""
    config = {
        "_comment": "Voice Cloning Configuration - Auto-generated by VZoel Bot",
        "_generated": datetime.now().isoformat(),
        "_version": "1.0.0",
        
        "api_keys": {
            "elevenlabs": {
                "key": "YOUR_ELEVENLABS_API_KEY_HERE",
                "note": "Get free key from: https://elevenlabs.io/ (10k chars free)",
                "pricing": "Free: 10k chars/month, Pro: $5/month",
                "status": "not_configured"
            },
            "openai": {
                "key": "YOUR_OPENAI_API_KEY_HERE",
                "note": "Get from: https://platform.openai.com/ (Pay per use)",
                "pricing": "$0.015 per 1k chars for TTS",
                "status": "not_configured"
            },
            "murf": {
                "key": "YOUR_MURF_API_KEY_HERE",
                "note": "Get from: https://murf.ai/ (10 min free trial)",
                "pricing": "Free: 10 min trial, Studio: $19/month",
                "status": "not_configured"
            }
        },
        
        "voice_settings": {
            "default_voice": "jokowi",
            "quality_preference": "high",
            "real_time_processing": True,
            "auto_process_calls": False,
            "streaming_enabled": False,
            "auto_backup": True,
            "error_fallback": True
        },
        
        "character_voices": {
            "jokowi": {
                "name": "Joko Widodo (Jokowi)",
                "description": "üáÆüá© Presiden Indonesia - Suara khas Bapak Jokowi",
                "api": "elevenlabs",
                "voice_id": "pNInz6obpgDQGcFmaJgB",
                "settings": {
                    "stability": 0.85,
                    "similarity_boost": 0.80,
                    "style": 0.3,
                    "use_speaker_boost": True
                },
                "category": "indonesia_politics",
                "language": "id",
                "tags": ["president", "indonesia", "official"],
                "popularity": 5.0
            },
            "prabowo": {
                "name": "Prabowo Subianto",
                "description": "üéñÔ∏è Menteri Pertahanan - Suara tegas dan berwibawa",
                "api": "elevenlabs",
                "voice_id": "29vD33N1CtxCmqQRPOHJ", 
                "settings": {
                    "stability": 0.82,
                    "similarity_boost": 0.78,
                    "style": 0.35,
                    "use_speaker_boost": True
                },
                "category": "indonesia_politics",
                "language": "id",
                "tags": ["minister", "defense", "authoritative"],
                "popularity": 4.8
            },
            "claude": {
                "name": "Claude AI Assistant",
                "description": "ü§ñ AI Assistant - Professional dan informatif",
                "api": "openai",
                "voice_id": "alloy",
                "settings": {
                    "model": "tts-1",
                    "speed": 1.0
                },
                "category": "ai_assistant", 
                "language": "en",
                "tags": ["ai", "assistant", "helpful"],
                "popularity": 4.5
            },
            "mlbb": {
                "name": "MLBB Narrator",
                "description": "‚öîÔ∏è Mobile Legends - Narrator epik pertempuran",
                "api": "elevenlabs",
                "voice_id": "21m00Tcm4TlvDq8ikWAM",
                "settings": {
                    "stability": 0.80,
                    "similarity_boost": 0.75,
                    "style": 0.4,
                    "use_speaker_boost": True
                },
                "category": "gaming",
                "language": "en",
                "tags": ["gaming", "epic", "narrator"],
                "popularity": 4.7
            },
            "squidward": {
                "name": "Squidward Tentacles",
                "description": "ü¶ë SpongeBob - Suara sarkastik dan pesimis",
                "api": "elevenlabs",
                "voice_id": "pNInz6obpgDQGcFmaJgB",
                "settings": {
                    "stability": 0.70,
                    "similarity_boost": 0.65,
                    "style": 0.5,
                    "use_speaker_boost": True
                },
                "category": "cartoon_character",
                "language": "en",
                "tags": ["sarcastic", "cartoon", "grumpy"],
                "popularity": 4.2
            },
            "spongebob": {
                "name": "SpongeBob SquarePants",
                "description": "üßΩ SpongeBob - Suara ceria dan antusias",
                "api": "elevenlabs",
                "voice_id": "21m00Tcm4TlvDq8ikWAM",
                "settings": {
                    "stability": 0.65,
                    "similarity_boost": 0.60,
                    "style": 0.6,
                    "use_speaker_boost": True
                },
                "category": "cartoon_character",
                "language": "en",
                "tags": ["cheerful", "cartoon", "optimistic"],
                "popularity": 4.6
            },
            "presenter": {
                "name": "Presenter Sexy",
                "description": "üíÉ Presenter - Suara sensual dan menarik",
                "api": "elevenlabs",
                "voice_id": "21m00Tcm4TlvDq8ikWAM",
                "settings": {
                    "stability": 0.77,
                    "similarity_boost": 0.72,
                    "style": 0.45,
                    "use_speaker_boost": True
                },
                "category": "presenter",
                "language": "id",
                "tags": ["sultry", "professional", "news"],
                "popularity": 4.3
            }
        },
        
        "audio_settings": {
            "output_format": "mp3",
            "sample_rate": 44100,
            "bit_rate": 192,
            "channels": 1,
            "max_duration": 300,
            "auto_normalize": True,
            "compression": "medium"
        },
        
        "performance": {
            "cache_enabled": True,
            "cache_duration": 3600,
            "parallel_requests": 3,
            "timeout": 30,
            "retry_attempts": 2,
            "rate_limit": 10
        },
        
        "setup_instructions": {
            "1": "Jalankan: .vsetup auto untuk setup otomatis",
            "2": "Atau manual: .vsetup keys untuk input API keys",
            "3": "Test: .vsetup test untuk validasi setup",
            "4": "Demo: .vsetup demo untuk test semua suara",
            "5": "Generate: .vclone jokowi Halo Indonesia!",
            "6": "Help: .vsetup help untuk bantuan lengkap"
        },
        
        "troubleshooting": {
            "no_api_key": "Jalankan .vsetup keys untuk setup API key",
            "invalid_key": "Check API key di dashboard provider",
            "quota_exceeded": "Upgrade plan atau tunggu reset quota",
            "network_error": "Check koneksi internet",
            "voice_not_found": "Jalankan .vsetup voices untuk refresh"
        }
    }
    
    return config

async def auto_detect_api_keys():
    """Try to auto-detect available API keys from environment or common files"""
    detected_keys = {}
    
    # Check environment variables
    env_keys = {
        "elevenlabs": ["ELEVEN_API_KEY", "ELEVENLABS_API_KEY", "XI_API_KEY"],
        "openai": ["OPENAI_API_KEY", "OPENAI_TOKEN"],
        "murf": ["MURF_API_KEY", "MURF_TOKEN"]
    }
    
    for provider, env_vars in env_keys.items():
        for env_var in env_vars:
            key = os.getenv(env_var)
            if key and key.startswith("sk-"):
                detected_keys[provider] = key
                break
    
    # Check common config files
    config_files = [".env", "config.json", "api_keys.json"]
    for file in config_files:
        if os.path.exists(file):
            try:
                if file.endswith('.env'):
                    with open(file, 'r') as f:
                        for line in f:
                            if '=' in line and not line.startswith('#'):
                                key, value = line.strip().split('=', 1)
                                if 'ELEVEN' in key.upper() and value.startswith('sk-'):
                                    detected_keys['elevenlabs'] = value
                                elif 'OPENAI' in key.upper() and value.startswith('sk-'):
                                    detected_keys['openai'] = value
                elif file.endswith('.json'):
                    with open(file, 'r') as f:
                        data = json.load(f)
                        for provider in ['elevenlabs', 'openai', 'murf']:
                            if provider in data and isinstance(data[provider], str):
                                detected_keys[provider] = data[provider]
            except:
                continue
    
    return detected_keys

async def validate_api_key(provider, api_key):
    """Validate API key dengan test request"""
    try:
        if provider == "elevenlabs":
            headers = {"xi-api-key": api_key}
            response = requests.get("https://api.elevenlabs.io/v1/voices", headers=headers, timeout=10)
            return response.status_code == 200
            
        elif provider == "openai":
            headers = {"Authorization": f"Bearer {api_key}"}
            response = requests.get("https://api.openai.com/v1/models", headers=headers, timeout=10)
            return response.status_code == 200
            
        elif provider == "murf":
            headers = {"Authorization": f"Bearer {api_key}"}
            response = requests.get("https://api.murf.ai/v1/voices", headers=headers, timeout=10)
            return response.status_code == 200
            
    except Exception as e:
        print(f"API validation error for {provider}: {e}")
        return False
    
    return False

async def setup_voice_models():
    """Setup and validate voice models"""
    try:
        # Load current config
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
        else:
            config = create_default_config()
        
        # Test available voices for each API
        available_voices = {}
        
        for provider in ['elevenlabs', 'openai']:
            api_key = config.get('api_keys', {}).get(provider, {}).get('key', '')
            if api_key and not api_key.startswith('YOUR_'):
                try:
                    if provider == "elevenlabs":
                        headers = {"xi-api-key": api_key}
                        response = requests.get("https://api.elevenlabs.io/v1/voices", headers=headers, timeout=10)
                        if response.status_code == 200:
                            voices_data = response.json()
                            available_voices[provider] = {v['voice_id']: v['name'] for v in voices_data.get('voices', [])}
                            
                    elif provider == "openai":
                        # OpenAI has fixed voice models
                        available_voices[provider] = API_PROVIDERS[provider]['demo_voices']
                        
                except Exception as e:
                    print(f"Error fetching voices for {provider}: {e}")
        
        return available_voices
        
    except Exception as e:
        print(f"Setup voice models error: {e}")
        return {}

def save_config(config):
    """Save configuration with backup"""
    try:
        # Create backup
        if os.path.exists(CONFIG_FILE):
            os.makedirs(BACKUP_DIR, exist_ok=True)
            backup_file = f"{BACKUP_DIR}/config_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(CONFIG_FILE, 'r') as src, open(backup_file, 'w') as dst:
                dst.write(src.read())
        
        # Save new config
        config['_last_updated'] = datetime.now().isoformat()
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        return True
    except Exception as e:
        print(f"Save config error: {e}")
        return False

# ===== INTERACTIVE KEY SETUP HANDLER =====
@client.on(events.NewMessage())
async def handle_key_input(event):
    """Handle API key input during interactive setup"""
    try:
        text = event.message.message.strip()
        
        # Check if this is an API key input
        if ' ' in text and len(text.split()) == 2:
            provider, api_key = text.split(None, 1)
            provider = provider.lower()
            
            if provider in ['elevenlabs', 'openai', 'murf'] and api_key.startswith('sk-'):
                # Load config
                if os.path.exists(CONFIG_FILE):
                    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                        config = json.load(f)
                else:
                    config = create_default_config()
                
                # Validate key
                msg = await safe_send_premium(event, f"{get_emoji('main')} **Validating {provider} API key...**")
                
                is_valid = await validate_api_key(provider, api_key)
                
                if is_valid:
                    # Save key
                    config['api_keys'][provider]['key'] = api_key
                    config['api_keys'][provider]['status'] = 'valid'
                    save_config(config)
                    
                    success_text = f"""{get_emoji('check')} **{provider.title()} API key saved!**
                    
{get_emoji('adder4')} **Ready to use voice cloning with {provider}!**
{get_emoji('adder2')} **Test with:** `.vclone jokowi Test suara!`

{get_vzoel_signature()}"""
                    await safe_edit_premium(msg, success_text)
                else:
                    await safe_edit_premium(msg, f"{get_emoji('adder3')} **Invalid {provider} API key!** Please check and try again.\n\n{get_vzoel_signature()}")
        
        elif text.lower() == 'cancel':
            await safe_send_premium(event, f"{get_emoji('check')} **Setup cancelled.** Use `.vsetup keys` to try again.\n\n{get_vzoel_signature()}")
            
    except Exception as e:
        # Silently handle non-key messages
        pass

# ===== EVENT HANDLERS =====
@client.on(events.NewMessage(pattern=r'^\.vsetup auto$'))
async def auto_setup(event):
    """Auto setup voice cloning system"""
    try:
        msg = await event.respond(create_premium_message('loading', '**Starting auto setup...**'))
        
        # Step 1: Create default config
        await msg.edit(create_premium_message('setup', '**Step 1/5:** Creating default configuration...'))
        config = create_default_config()
        
        # Step 2: Auto-detect API keys
        await msg.edit(create_premium_message('api', '**Step 2/5:** Detecting API keys...'))
        detected_keys = await auto_detect_api_keys()
        
        if detected_keys:
            for provider, key in detected_keys.items():
                if provider in config['api_keys']:
                    config['api_keys'][provider]['key'] = key
                    config['api_keys'][provider]['status'] = 'detected'
            
            key_count = len(detected_keys)
            await msg.edit(create_premium_message('check', f'**Step 2/5:** Found {key_count} API key(s)! Validating...'))
        else:
            await msg.edit(create_premium_message('error', '**Step 2/5:** No API keys detected. Manual setup required.'))
        
        # Step 3: Validate keys
        await msg.edit(create_premium_message('loading', '**Step 3/5:** Validating API keys...'))
        valid_keys = []
        
        for provider, key_info in config['api_keys'].items():
            if key_info['status'] == 'detected':
                is_valid = await validate_api_key(provider, key_info['key'])
                if is_valid:
                    config['api_keys'][provider]['status'] = 'valid'
                    valid_keys.append(provider)
                else:
                    config['api_keys'][provider]['status'] = 'invalid'
        
        # Step 4: Setup voice models
        await msg.edit(create_premium_message('voice', '**Step 4/5:** Setting up voice models...'))
        available_voices = await setup_voice_models()
        
        # Step 5: Save config
        await msg.edit(create_premium_message('setup', '**Step 5/5:** Saving configuration...'))
        success = save_config(config)
        
        # Final result
        if success:
            result = f"""**üîß Auto Setup Complete!**
            
**‚úÖ Configuration:** Created & saved
**üîë API Keys:** {len(valid_keys)} valid key(s)
**üé§ Voice Models:** {len(config['character_voices'])} characters ready

**Valid APIs:** {', '.join(valid_keys) if valid_keys else 'None'}

**Next Steps:**
‚Ä¢ Test: `.vsetup test`
‚Ä¢ Demo: `.vsetup demo` 
‚Ä¢ Generate: `.vclone jokowi Halo Indonesia!`"""
            
            await msg.edit(create_premium_message('check', result))
        else:
            await msg.edit(create_premium_message('error', '**Setup failed!** Check permissions and try again.'))
            
    except Exception as e:
        await event.respond(create_premium_message('error', f'**Auto setup error:** {str(e)}'))

@client.on(events.NewMessage(pattern=r'^\.vsetup keys$'))
async def setup_keys_interactive(event):
    """Interactive API key setup"""
    try:
        msg = await event.respond(create_premium_message('api', """**üîë API Key Setup Guide**

**ElevenLabs** (Recommended - Free 10k chars):
1. Visit: https://elevenlabs.io/
2. Sign up & verify email
3. Go to Profile ‚Üí API Key
4. Copy key & reply: `elevenlabs YOUR_KEY_HERE`

**OpenAI** (Pay per use):
1. Visit: https://platform.openai.com/
2. Create account & add payment
3. Go to API Keys ‚Üí Create new
4. Reply: `openai YOUR_KEY_HERE`

**Reply with format:** `provider api_key`
**Example:** `elevenlabs sk-abc123...`
**Cancel:** Reply `cancel`"""))
        
        # Store setup state
        setup_state = {"step": "waiting_key", "chat_id": event.chat_id, "user_id": event.sender_id}
        
    except Exception as e:
        await event.respond(create_premium_message('error', f'**Setup keys error:** {str(e)}'))

@client.on(events.NewMessage(pattern=r'^\.vsetup test$'))
async def test_setup(event):
    """Test current voice cloning setup"""
    try:
        if not os.path.exists(CONFIG_FILE):
            await event.respond(create_premium_message('error', '**No configuration found!** Run `.vsetup auto` first.'))
            return
        
        msg = await event.respond(create_premium_message('loading', '**Testing voice cloning setup...**'))
        
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # Test API keys
        api_results = {}
        for provider, key_info in config['api_keys'].items():
            if key_info.get('key', '').startswith('YOUR_'):
                api_results[provider] = "‚ùå Not configured"
            else:
                is_valid = await validate_api_key(provider, key_info['key'])
                api_results[provider] = "‚úÖ Valid" if is_valid else "‚ùå Invalid"
        
        # Test voice models
        voice_count = len(config.get('character_voices', {}))
        
        result = f"""**üß™ Setup Test Results**

**API Status:**
{chr(10).join(f"‚Ä¢ {provider.title()}: {status}" for provider, status in api_results.items())}

**Voice Models:** {voice_count} configured
**Config File:** ‚úÖ Found
**Backup System:** ‚úÖ Ready

**Quick Test:** Try `.vclone jokowi Test suara Jokowi!`"""
        
        await msg.edit(create_premium_message('check', result))
        
    except Exception as e:
        await event.respond(create_premium_message('error', f'**Test error:** {str(e)}'))

@client.on(events.NewMessage(pattern=r'^\.vsetup demo$'))
async def demo_voices(event):
    """Demo all available voices"""
    try:
        if not os.path.exists(CONFIG_FILE):
            await event.respond(create_premium_message('error', '**No configuration found!** Run `.vsetup auto` first.'))
            return
        
        msg = await event.respond(create_premium_message('loading', '**Preparing voice demos...**'))
        
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        voices = config.get('character_voices', {})
        demo_text = "Halo, ini adalah demo suara saya!"
        
        demo_list = []
        for voice_id, voice_info in voices.items():
            demo_list.append(f"**{voice_info['name']}**")
            demo_list.append(f"{voice_info['description']}")
            demo_list.append(f"Command: `.vclone {voice_id} {demo_text}`")
            demo_list.append("")
        
        result = f"""**üé§ Voice Demo Guide**

Try these commands to test voices:

{chr(10).join(demo_list)}

**Popular Commands:**
‚Ä¢ `.vclone jokowi Selamat pagi Indonesia!`
‚Ä¢ `.vclone prabowo Siap melaksanakan perintah!`
‚Ä¢ `.vclone claude How can I help you today?`
‚Ä¢ `.vclone squidward Oh great, another day...`"""
        
        await msg.edit(create_premium_message('voice', result))
        
    except Exception as e:
        await event.respond(create_premium_message('error', f'**Demo error:** {str(e)}'))

@client.on(events.NewMessage(pattern=r'^\.vsetup config$'))
async def show_config(event):
    """Show current configuration"""
    try:
        if not os.path.exists(CONFIG_FILE):
            await event.respond(create_premium_message('error', '**No configuration found!** Run `.vsetup auto` first.'))
            return
        
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # API status
        api_status = []
        for provider, key_info in config['api_keys'].items():
            status = key_info.get('status', 'unknown')
            if status == 'valid':
                api_status.append(f"‚úÖ {provider.title()}")
            elif status == 'not_configured':
                api_status.append(f"‚ö™ {provider.title()}")
            else:
                api_status.append(f"‚ùå {provider.title()}")
        
        # Voice models
        voices = config.get('character_voices', {})
        voice_list = [f"‚Ä¢ {info['name']}" for info in voices.values()][:5]
        if len(voices) > 5:
            voice_list.append(f"‚Ä¢ ... and {len(voices) - 5} more")
        
        result = f"""**‚öôÔ∏è Current Configuration**

**API Keys:**
{chr(10).join(api_status)}

**Voice Models ({len(voices)} total):**
{chr(10).join(voice_list)}

**Settings:**
‚Ä¢ Default Voice: {config.get('voice_settings', {}).get('default_voice', 'jokowi')}
‚Ä¢ Quality: {config.get('voice_settings', {}).get('quality_preference', 'high')}
‚Ä¢ Real-time: {config.get('voice_settings', {}).get('real_time_processing', True)}

**Last Updated:** {config.get('_last_updated', 'Unknown')}"""
        
        await event.respond(create_premium_message('setup', result))
        
    except Exception as e:
        await event.respond(create_premium_message('error', f'**Config error:** {str(e)}'))

# ===== INITIALIZATION =====
def setup():
    """Plugin setup function"""
    print("üîß Voice Clone Auto Setup Plugin loaded!")
    
    # Create directories
    os.makedirs(BACKUP_DIR, exist_ok=True)
    
    # Auto-create default config if not exists
    if not os.path.exists(CONFIG_FILE):
        config = create_default_config()
        save_config(config)
        print("üìÑ Default voice clone config created!")
    
    return True

if __name__ == "__main__":
    setup()